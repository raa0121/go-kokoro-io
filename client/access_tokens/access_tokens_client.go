// Code generated by go-swagger; DO NOT EDIT.

package access_tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new access tokens API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for access tokens API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteV1AccessTokensAccessTokenID Delete a access_token
*/
func (a *Client) DeleteV1AccessTokensAccessTokenID(params *DeleteV1AccessTokensAccessTokenIDParams) (*DeleteV1AccessTokensAccessTokenIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1AccessTokensAccessTokenIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1AccessTokensAccessTokenId",
		Method:             "DELETE",
		PathPattern:        "/v1/access_tokens/{access_token_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1AccessTokensAccessTokenIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1AccessTokensAccessTokenIDOK), nil

}

/*
GetV1AccessTokens Returns user's access tokens
*/
func (a *Client) GetV1AccessTokens(params *GetV1AccessTokensParams) (*GetV1AccessTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AccessTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1AccessTokens",
		Method:             "GET",
		PathPattern:        "/v1/access_tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1AccessTokensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1AccessTokensOK), nil

}

/*
PostV1AccessTokens Creates new access token
*/
func (a *Client) PostV1AccessTokens(params *PostV1AccessTokensParams) (*PostV1AccessTokensCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1AccessTokensParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1AccessTokens",
		Method:             "POST",
		PathPattern:        "/v1/access_tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1AccessTokensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1AccessTokensCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
