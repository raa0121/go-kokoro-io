// Code generated by go-swagger; DO NOT EDIT.

package profiles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new profiles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for profiles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetV1Profiles Returns all user's profile except yours
*/
func (a *Client) GetV1Profiles(params *GetV1ProfilesParams) (*GetV1ProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1Profiles",
		Method:             "GET",
		PathPattern:        "/v1/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ProfilesOK), nil

}

/*
GetV1ProfilesMe Returns current logged-in user's profile
*/
func (a *Client) GetV1ProfilesMe(params *GetV1ProfilesMeParams) (*GetV1ProfilesMeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ProfilesMeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1ProfilesMe",
		Method:             "GET",
		PathPattern:        "/v1/profiles/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ProfilesMeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ProfilesMeOK), nil

}

/*
PutV1ProfilesMe Updates your profile.
*/
func (a *Client) PutV1ProfilesMe(params *PutV1ProfilesMeParams) (*PutV1ProfilesMeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1ProfilesMeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putV1ProfilesMe",
		Method:             "PUT",
		PathPattern:        "/v1/profiles/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV1ProfilesMeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1ProfilesMeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
