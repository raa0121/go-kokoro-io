// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostV1DevicesParams creates a new PostV1DevicesParams object
// with the default values initialized.
func NewPostV1DevicesParams() *PostV1DevicesParams {
	var (
		kindDefault = string("chrome")
	)
	return &PostV1DevicesParams{
		Kind: kindDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPostV1DevicesParamsWithTimeout creates a new PostV1DevicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostV1DevicesParamsWithTimeout(timeout time.Duration) *PostV1DevicesParams {
	var (
		kindDefault = string("chrome")
	)
	return &PostV1DevicesParams{
		Kind: kindDefault,

		timeout: timeout,
	}
}

// NewPostV1DevicesParamsWithContext creates a new PostV1DevicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostV1DevicesParamsWithContext(ctx context.Context) *PostV1DevicesParams {
	var (
		kindDefault = string("chrome")
	)
	return &PostV1DevicesParams{
		Kind: kindDefault,

		Context: ctx,
	}
}

// NewPostV1DevicesParamsWithHTTPClient creates a new PostV1DevicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostV1DevicesParamsWithHTTPClient(client *http.Client) *PostV1DevicesParams {
	var (
		kindDefault = string("chrome")
	)
	return &PostV1DevicesParams{
		Kind:       kindDefault,
		HTTPClient: client,
	}
}

/*PostV1DevicesParams contains all the parameters to send to the API endpoint
for the post v1 devices operation typically these are written to a http.Request
*/
type PostV1DevicesParams struct {

	/*DeviceIdentifier*/
	DeviceIdentifier string
	/*Kind*/
	Kind string
	/*Name*/
	Name string
	/*NotificationIdentifier*/
	NotificationIdentifier *string
	/*SubscribeNotification*/
	SubscribeNotification *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post v1 devices params
func (o *PostV1DevicesParams) WithTimeout(timeout time.Duration) *PostV1DevicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post v1 devices params
func (o *PostV1DevicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post v1 devices params
func (o *PostV1DevicesParams) WithContext(ctx context.Context) *PostV1DevicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post v1 devices params
func (o *PostV1DevicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post v1 devices params
func (o *PostV1DevicesParams) WithHTTPClient(client *http.Client) *PostV1DevicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post v1 devices params
func (o *PostV1DevicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceIdentifier adds the deviceIdentifier to the post v1 devices params
func (o *PostV1DevicesParams) WithDeviceIdentifier(deviceIdentifier string) *PostV1DevicesParams {
	o.SetDeviceIdentifier(deviceIdentifier)
	return o
}

// SetDeviceIdentifier adds the deviceIdentifier to the post v1 devices params
func (o *PostV1DevicesParams) SetDeviceIdentifier(deviceIdentifier string) {
	o.DeviceIdentifier = deviceIdentifier
}

// WithKind adds the kind to the post v1 devices params
func (o *PostV1DevicesParams) WithKind(kind string) *PostV1DevicesParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the post v1 devices params
func (o *PostV1DevicesParams) SetKind(kind string) {
	o.Kind = kind
}

// WithName adds the name to the post v1 devices params
func (o *PostV1DevicesParams) WithName(name string) *PostV1DevicesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the post v1 devices params
func (o *PostV1DevicesParams) SetName(name string) {
	o.Name = name
}

// WithNotificationIdentifier adds the notificationIdentifier to the post v1 devices params
func (o *PostV1DevicesParams) WithNotificationIdentifier(notificationIdentifier *string) *PostV1DevicesParams {
	o.SetNotificationIdentifier(notificationIdentifier)
	return o
}

// SetNotificationIdentifier adds the notificationIdentifier to the post v1 devices params
func (o *PostV1DevicesParams) SetNotificationIdentifier(notificationIdentifier *string) {
	o.NotificationIdentifier = notificationIdentifier
}

// WithSubscribeNotification adds the subscribeNotification to the post v1 devices params
func (o *PostV1DevicesParams) WithSubscribeNotification(subscribeNotification *bool) *PostV1DevicesParams {
	o.SetSubscribeNotification(subscribeNotification)
	return o
}

// SetSubscribeNotification adds the subscribeNotification to the post v1 devices params
func (o *PostV1DevicesParams) SetSubscribeNotification(subscribeNotification *bool) {
	o.SubscribeNotification = subscribeNotification
}

// WriteToRequest writes these params to a swagger request
func (o *PostV1DevicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param device_identifier
	frDeviceIdentifier := o.DeviceIdentifier
	fDeviceIdentifier := frDeviceIdentifier
	if fDeviceIdentifier != "" {
		if err := r.SetFormParam("device_identifier", fDeviceIdentifier); err != nil {
			return err
		}
	}

	// form param kind
	frKind := o.Kind
	fKind := frKind
	if fKind != "" {
		if err := r.SetFormParam("kind", fKind); err != nil {
			return err
		}
	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	if o.NotificationIdentifier != nil {

		// form param notification_identifier
		var frNotificationIdentifier string
		if o.NotificationIdentifier != nil {
			frNotificationIdentifier = *o.NotificationIdentifier
		}
		fNotificationIdentifier := frNotificationIdentifier
		if fNotificationIdentifier != "" {
			if err := r.SetFormParam("notification_identifier", fNotificationIdentifier); err != nil {
				return err
			}
		}

	}

	if o.SubscribeNotification != nil {

		// form param subscribe_notification
		var frSubscribeNotification bool
		if o.SubscribeNotification != nil {
			frSubscribeNotification = *o.SubscribeNotification
		}
		fSubscribeNotification := swag.FormatBool(frSubscribeNotification)
		if fSubscribeNotification != "" {
			if err := r.SetFormParam("subscribe_notification", fSubscribeNotification); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
