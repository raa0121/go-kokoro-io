// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutV1ChannelsChannelIDParams creates a new PutV1ChannelsChannelIDParams object
// with the default values initialized.
func NewPutV1ChannelsChannelIDParams() *PutV1ChannelsChannelIDParams {
	var ()
	return &PutV1ChannelsChannelIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutV1ChannelsChannelIDParamsWithTimeout creates a new PutV1ChannelsChannelIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutV1ChannelsChannelIDParamsWithTimeout(timeout time.Duration) *PutV1ChannelsChannelIDParams {
	var ()
	return &PutV1ChannelsChannelIDParams{

		timeout: timeout,
	}
}

// NewPutV1ChannelsChannelIDParamsWithContext creates a new PutV1ChannelsChannelIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutV1ChannelsChannelIDParamsWithContext(ctx context.Context) *PutV1ChannelsChannelIDParams {
	var ()
	return &PutV1ChannelsChannelIDParams{

		Context: ctx,
	}
}

// NewPutV1ChannelsChannelIDParamsWithHTTPClient creates a new PutV1ChannelsChannelIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutV1ChannelsChannelIDParamsWithHTTPClient(client *http.Client) *PutV1ChannelsChannelIDParams {
	var ()
	return &PutV1ChannelsChannelIDParams{
		HTTPClient: client,
	}
}

/*PutV1ChannelsChannelIDParams contains all the parameters to send to the API endpoint
for the put v1 channels channel Id operation typically these are written to a http.Request
*/
type PutV1ChannelsChannelIDParams struct {

	/*ChannelChannelName*/
	ChannelChannelName *string
	/*ChannelDescription*/
	ChannelDescription *string
	/*ChannelID*/
	ChannelID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put v1 channels channel Id params
func (o *PutV1ChannelsChannelIDParams) WithTimeout(timeout time.Duration) *PutV1ChannelsChannelIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put v1 channels channel Id params
func (o *PutV1ChannelsChannelIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put v1 channels channel Id params
func (o *PutV1ChannelsChannelIDParams) WithContext(ctx context.Context) *PutV1ChannelsChannelIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put v1 channels channel Id params
func (o *PutV1ChannelsChannelIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put v1 channels channel Id params
func (o *PutV1ChannelsChannelIDParams) WithHTTPClient(client *http.Client) *PutV1ChannelsChannelIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put v1 channels channel Id params
func (o *PutV1ChannelsChannelIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChannelChannelName adds the channelChannelName to the put v1 channels channel Id params
func (o *PutV1ChannelsChannelIDParams) WithChannelChannelName(channelChannelName *string) *PutV1ChannelsChannelIDParams {
	o.SetChannelChannelName(channelChannelName)
	return o
}

// SetChannelChannelName adds the channelChannelName to the put v1 channels channel Id params
func (o *PutV1ChannelsChannelIDParams) SetChannelChannelName(channelChannelName *string) {
	o.ChannelChannelName = channelChannelName
}

// WithChannelDescription adds the channelDescription to the put v1 channels channel Id params
func (o *PutV1ChannelsChannelIDParams) WithChannelDescription(channelDescription *string) *PutV1ChannelsChannelIDParams {
	o.SetChannelDescription(channelDescription)
	return o
}

// SetChannelDescription adds the channelDescription to the put v1 channels channel Id params
func (o *PutV1ChannelsChannelIDParams) SetChannelDescription(channelDescription *string) {
	o.ChannelDescription = channelDescription
}

// WithChannelID adds the channelID to the put v1 channels channel Id params
func (o *PutV1ChannelsChannelIDParams) WithChannelID(channelID string) *PutV1ChannelsChannelIDParams {
	o.SetChannelID(channelID)
	return o
}

// SetChannelID adds the channelId to the put v1 channels channel Id params
func (o *PutV1ChannelsChannelIDParams) SetChannelID(channelID string) {
	o.ChannelID = channelID
}

// WriteToRequest writes these params to a swagger request
func (o *PutV1ChannelsChannelIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ChannelChannelName != nil {

		// form param channel[channel_name]
		var frChannelChannelName string
		if o.ChannelChannelName != nil {
			frChannelChannelName = *o.ChannelChannelName
		}
		fChannelChannelName := frChannelChannelName
		if fChannelChannelName != "" {
			if err := r.SetFormParam("channel[channel_name]", fChannelChannelName); err != nil {
				return err
			}
		}

	}

	if o.ChannelDescription != nil {

		// form param channel[description]
		var frChannelDescription string
		if o.ChannelDescription != nil {
			frChannelDescription = *o.ChannelDescription
		}
		fChannelDescription := frChannelDescription
		if fChannelDescription != "" {
			if err := r.SetFormParam("channel[description]", fChannelDescription); err != nil {
				return err
			}
		}

	}

	// path param channel_id
	if err := r.SetPathParam("channel_id", o.ChannelID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
