// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostV1ChannelsParams creates a new PostV1ChannelsParams object
// with the default values initialized.
func NewPostV1ChannelsParams() *PostV1ChannelsParams {
	var (
		channelKindDefault = string("public_channel")
	)
	return &PostV1ChannelsParams{
		ChannelKind: &channelKindDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPostV1ChannelsParamsWithTimeout creates a new PostV1ChannelsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostV1ChannelsParamsWithTimeout(timeout time.Duration) *PostV1ChannelsParams {
	var (
		channelKindDefault = string("public_channel")
	)
	return &PostV1ChannelsParams{
		ChannelKind: &channelKindDefault,

		timeout: timeout,
	}
}

// NewPostV1ChannelsParamsWithContext creates a new PostV1ChannelsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostV1ChannelsParamsWithContext(ctx context.Context) *PostV1ChannelsParams {
	var (
		channelKindDefault = string("public_channel")
	)
	return &PostV1ChannelsParams{
		ChannelKind: &channelKindDefault,

		Context: ctx,
	}
}

// NewPostV1ChannelsParamsWithHTTPClient creates a new PostV1ChannelsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostV1ChannelsParamsWithHTTPClient(client *http.Client) *PostV1ChannelsParams {
	var (
		channelKindDefault = string("public_channel")
	)
	return &PostV1ChannelsParams{
		ChannelKind: &channelKindDefault,
		HTTPClient:  client,
	}
}

/*PostV1ChannelsParams contains all the parameters to send to the API endpoint
for the post v1 channels operation typically these are written to a http.Request
*/
type PostV1ChannelsParams struct {

	/*ChannelChannelName*/
	ChannelChannelName string
	/*ChannelDescription*/
	ChannelDescription string
	/*ChannelKind*/
	ChannelKind *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post v1 channels params
func (o *PostV1ChannelsParams) WithTimeout(timeout time.Duration) *PostV1ChannelsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post v1 channels params
func (o *PostV1ChannelsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post v1 channels params
func (o *PostV1ChannelsParams) WithContext(ctx context.Context) *PostV1ChannelsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post v1 channels params
func (o *PostV1ChannelsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post v1 channels params
func (o *PostV1ChannelsParams) WithHTTPClient(client *http.Client) *PostV1ChannelsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post v1 channels params
func (o *PostV1ChannelsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChannelChannelName adds the channelChannelName to the post v1 channels params
func (o *PostV1ChannelsParams) WithChannelChannelName(channelChannelName string) *PostV1ChannelsParams {
	o.SetChannelChannelName(channelChannelName)
	return o
}

// SetChannelChannelName adds the channelChannelName to the post v1 channels params
func (o *PostV1ChannelsParams) SetChannelChannelName(channelChannelName string) {
	o.ChannelChannelName = channelChannelName
}

// WithChannelDescription adds the channelDescription to the post v1 channels params
func (o *PostV1ChannelsParams) WithChannelDescription(channelDescription string) *PostV1ChannelsParams {
	o.SetChannelDescription(channelDescription)
	return o
}

// SetChannelDescription adds the channelDescription to the post v1 channels params
func (o *PostV1ChannelsParams) SetChannelDescription(channelDescription string) {
	o.ChannelDescription = channelDescription
}

// WithChannelKind adds the channelKind to the post v1 channels params
func (o *PostV1ChannelsParams) WithChannelKind(channelKind *string) *PostV1ChannelsParams {
	o.SetChannelKind(channelKind)
	return o
}

// SetChannelKind adds the channelKind to the post v1 channels params
func (o *PostV1ChannelsParams) SetChannelKind(channelKind *string) {
	o.ChannelKind = channelKind
}

// WriteToRequest writes these params to a swagger request
func (o *PostV1ChannelsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param channel[channel_name]
	frChannelChannelName := o.ChannelChannelName
	fChannelChannelName := frChannelChannelName
	if fChannelChannelName != "" {
		if err := r.SetFormParam("channel[channel_name]", fChannelChannelName); err != nil {
			return err
		}
	}

	// form param channel[description]
	frChannelDescription := o.ChannelDescription
	fChannelDescription := frChannelDescription
	if fChannelDescription != "" {
		if err := r.SetFormParam("channel[description]", fChannelDescription); err != nil {
			return err
		}
	}

	if o.ChannelKind != nil {

		// form param channel[kind]
		var frChannelKind string
		if o.ChannelKind != nil {
			frChannelKind = *o.ChannelKind
		}
		fChannelKind := frChannelKind
		if fChannelKind != "" {
			if err := r.SetFormParam("channel[kind]", fChannelKind); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
