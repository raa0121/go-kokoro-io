// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new channels API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for channels API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetV1Channels Returns public channels.
*/
func (a *Client) GetV1Channels(params *GetV1ChannelsParams) (*GetV1ChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ChannelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1Channels",
		Method:             "GET",
		PathPattern:        "/v1/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ChannelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ChannelsOK), nil

}

/*
GetV1ChannelsChannelID Returns a channel
*/
func (a *Client) GetV1ChannelsChannelID(params *GetV1ChannelsChannelIDParams) (*GetV1ChannelsChannelIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ChannelsChannelIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1ChannelsChannelId",
		Method:             "GET",
		PathPattern:        "/v1/channels/{channel_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ChannelsChannelIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ChannelsChannelIDOK), nil

}

/*
GetV1ChannelsChannelIDMemberships Returns all of members in this channel
*/
func (a *Client) GetV1ChannelsChannelIDMemberships(params *GetV1ChannelsChannelIDMembershipsParams) (*GetV1ChannelsChannelIDMembershipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ChannelsChannelIDMembershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1ChannelsChannelIdMemberships",
		Method:             "GET",
		PathPattern:        "/v1/channels/{channel_id}/memberships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ChannelsChannelIDMembershipsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ChannelsChannelIDMembershipsOK), nil

}

/*
GetV1ChannelsChannelIDMessages Returns recent messages in the channel.
*/
func (a *Client) GetV1ChannelsChannelIDMessages(params *GetV1ChannelsChannelIDMessagesParams) (*GetV1ChannelsChannelIDMessagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ChannelsChannelIDMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1ChannelsChannelIdMessages",
		Method:             "GET",
		PathPattern:        "/v1/channels/{channel_id}/messages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ChannelsChannelIDMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1ChannelsChannelIDMessagesOK), nil

}

/*
PostV1Channels Creates a new channel.
*/
func (a *Client) PostV1Channels(params *PostV1ChannelsParams) (*PostV1ChannelsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ChannelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1Channels",
		Method:             "POST",
		PathPattern:        "/v1/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ChannelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1ChannelsCreated), nil

}

/*
PostV1ChannelsChannelIDMessages Creates a new message.
*/
func (a *Client) PostV1ChannelsChannelIDMessages(params *PostV1ChannelsChannelIDMessagesParams) (*PostV1ChannelsChannelIDMessagesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ChannelsChannelIDMessagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1ChannelsChannelIdMessages",
		Method:             "POST",
		PathPattern:        "/v1/channels/{channel_id}/messages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ChannelsChannelIDMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1ChannelsChannelIDMessagesCreated), nil

}

/*
PostV1ChannelsDirectMessage Creates a new direct message.
*/
func (a *Client) PostV1ChannelsDirectMessage(params *PostV1ChannelsDirectMessageParams) (*PostV1ChannelsDirectMessageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ChannelsDirectMessageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1ChannelsDirectMessage",
		Method:             "POST",
		PathPattern:        "/v1/channels/direct_message",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ChannelsDirectMessageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1ChannelsDirectMessageCreated), nil

}

/*
PutV1ChannelsChannelID Updates a channel.
*/
func (a *Client) PutV1ChannelsChannelID(params *PutV1ChannelsChannelIDParams) (*PutV1ChannelsChannelIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1ChannelsChannelIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putV1ChannelsChannelId",
		Method:             "PUT",
		PathPattern:        "/v1/channels/{channel_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV1ChannelsChannelIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1ChannelsChannelIDOK), nil

}

/*
PutV1ChannelsChannelIDArchive Archive a channel.
*/
func (a *Client) PutV1ChannelsChannelIDArchive(params *PutV1ChannelsChannelIDArchiveParams) (*PutV1ChannelsChannelIDArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1ChannelsChannelIDArchiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putV1ChannelsChannelIdArchive",
		Method:             "PUT",
		PathPattern:        "/v1/channels/{channel_id}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV1ChannelsChannelIDArchiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1ChannelsChannelIDArchiveOK), nil

}

/*
PutV1ChannelsChannelIDManageMembersMemberID Changes the authority of member
*/
func (a *Client) PutV1ChannelsChannelIDManageMembersMemberID(params *PutV1ChannelsChannelIDManageMembersMemberIDParams) (*PutV1ChannelsChannelIDManageMembersMemberIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1ChannelsChannelIDManageMembersMemberIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putV1ChannelsChannelIdManageMembersMemberId",
		Method:             "PUT",
		PathPattern:        "/v1/channels/{channel_id}/manage_members/{member_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV1ChannelsChannelIDManageMembersMemberIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1ChannelsChannelIDManageMembersMemberIDOK), nil

}

/*
PutV1ChannelsChannelIDUnarchive Unarchive a channel.
*/
func (a *Client) PutV1ChannelsChannelIDUnarchive(params *PutV1ChannelsChannelIDUnarchiveParams) (*PutV1ChannelsChannelIDUnarchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1ChannelsChannelIDUnarchiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putV1ChannelsChannelIdUnarchive",
		Method:             "PUT",
		PathPattern:        "/v1/channels/{channel_id}/unarchive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV1ChannelsChannelIDUnarchiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1ChannelsChannelIDUnarchiveOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
