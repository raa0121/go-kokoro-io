// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetV1ChannelsChannelIDMessagesParams creates a new GetV1ChannelsChannelIDMessagesParams object
// with the default values initialized.
func NewGetV1ChannelsChannelIDMessagesParams() *GetV1ChannelsChannelIDMessagesParams {
	var (
		limitDefault = int32(30)
	)
	return &GetV1ChannelsChannelIDMessagesParams{
		Limit: &limitDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1ChannelsChannelIDMessagesParamsWithTimeout creates a new GetV1ChannelsChannelIDMessagesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetV1ChannelsChannelIDMessagesParamsWithTimeout(timeout time.Duration) *GetV1ChannelsChannelIDMessagesParams {
	var (
		limitDefault = int32(30)
	)
	return &GetV1ChannelsChannelIDMessagesParams{
		Limit: &limitDefault,

		timeout: timeout,
	}
}

// NewGetV1ChannelsChannelIDMessagesParamsWithContext creates a new GetV1ChannelsChannelIDMessagesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetV1ChannelsChannelIDMessagesParamsWithContext(ctx context.Context) *GetV1ChannelsChannelIDMessagesParams {
	var (
		limitDefault = int32(30)
	)
	return &GetV1ChannelsChannelIDMessagesParams{
		Limit: &limitDefault,

		Context: ctx,
	}
}

// NewGetV1ChannelsChannelIDMessagesParamsWithHTTPClient creates a new GetV1ChannelsChannelIDMessagesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetV1ChannelsChannelIDMessagesParamsWithHTTPClient(client *http.Client) *GetV1ChannelsChannelIDMessagesParams {
	var (
		limitDefault = int32(30)
	)
	return &GetV1ChannelsChannelIDMessagesParams{
		Limit:      &limitDefault,
		HTTPClient: client,
	}
}

/*GetV1ChannelsChannelIDMessagesParams contains all the parameters to send to the API endpoint
for the get v1 channels channel Id messages operation typically these are written to a http.Request
*/
type GetV1ChannelsChannelIDMessagesParams struct {

	/*AfterID*/
	AfterID *int32
	/*BeforeID*/
	BeforeID *int32
	/*ChannelID*/
	ChannelID string
	/*Limit*/
	Limit *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) WithTimeout(timeout time.Duration) *GetV1ChannelsChannelIDMessagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) WithContext(ctx context.Context) *GetV1ChannelsChannelIDMessagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) WithHTTPClient(client *http.Client) *GetV1ChannelsChannelIDMessagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfterID adds the afterID to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) WithAfterID(afterID *int32) *GetV1ChannelsChannelIDMessagesParams {
	o.SetAfterID(afterID)
	return o
}

// SetAfterID adds the afterId to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) SetAfterID(afterID *int32) {
	o.AfterID = afterID
}

// WithBeforeID adds the beforeID to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) WithBeforeID(beforeID *int32) *GetV1ChannelsChannelIDMessagesParams {
	o.SetBeforeID(beforeID)
	return o
}

// SetBeforeID adds the beforeId to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) SetBeforeID(beforeID *int32) {
	o.BeforeID = beforeID
}

// WithChannelID adds the channelID to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) WithChannelID(channelID string) *GetV1ChannelsChannelIDMessagesParams {
	o.SetChannelID(channelID)
	return o
}

// SetChannelID adds the channelId to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) SetChannelID(channelID string) {
	o.ChannelID = channelID
}

// WithLimit adds the limit to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) WithLimit(limit *int32) *GetV1ChannelsChannelIDMessagesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get v1 channels channel Id messages params
func (o *GetV1ChannelsChannelIDMessagesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1ChannelsChannelIDMessagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AfterID != nil {

		// query param after_id
		var qrAfterID int32
		if o.AfterID != nil {
			qrAfterID = *o.AfterID
		}
		qAfterID := swag.FormatInt32(qrAfterID)
		if qAfterID != "" {
			if err := r.SetQueryParam("after_id", qAfterID); err != nil {
				return err
			}
		}

	}

	if o.BeforeID != nil {

		// query param before_id
		var qrBeforeID int32
		if o.BeforeID != nil {
			qrBeforeID = *o.BeforeID
		}
		qBeforeID := swag.FormatInt32(qrBeforeID)
		if qBeforeID != "" {
			if err := r.SetQueryParam("before_id", qBeforeID); err != nil {
				return err
			}
		}

	}

	// path param channel_id
	if err := r.SetPathParam("channel_id", o.ChannelID); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
