// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostV1ChannelsChannelIDMessagesParams creates a new PostV1ChannelsChannelIDMessagesParams object
// with the default values initialized.
func NewPostV1ChannelsChannelIDMessagesParams() *PostV1ChannelsChannelIDMessagesParams {
	var ()
	return &PostV1ChannelsChannelIDMessagesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostV1ChannelsChannelIDMessagesParamsWithTimeout creates a new PostV1ChannelsChannelIDMessagesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostV1ChannelsChannelIDMessagesParamsWithTimeout(timeout time.Duration) *PostV1ChannelsChannelIDMessagesParams {
	var ()
	return &PostV1ChannelsChannelIDMessagesParams{

		timeout: timeout,
	}
}

// NewPostV1ChannelsChannelIDMessagesParamsWithContext creates a new PostV1ChannelsChannelIDMessagesParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostV1ChannelsChannelIDMessagesParamsWithContext(ctx context.Context) *PostV1ChannelsChannelIDMessagesParams {
	var ()
	return &PostV1ChannelsChannelIDMessagesParams{

		Context: ctx,
	}
}

// NewPostV1ChannelsChannelIDMessagesParamsWithHTTPClient creates a new PostV1ChannelsChannelIDMessagesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostV1ChannelsChannelIDMessagesParamsWithHTTPClient(client *http.Client) *PostV1ChannelsChannelIDMessagesParams {
	var ()
	return &PostV1ChannelsChannelIDMessagesParams{
		HTTPClient: client,
	}
}

/*PostV1ChannelsChannelIDMessagesParams contains all the parameters to send to the API endpoint
for the post v1 channels channel Id messages operation typically these are written to a http.Request
*/
type PostV1ChannelsChannelIDMessagesParams struct {

	/*ChannelID*/
	ChannelID string
	/*ExpandEmbedContents*/
	ExpandEmbedContents *bool
	/*IdempotentKey*/
	IdempotentKey *string
	/*Message*/
	Message string
	/*Nsfw*/
	Nsfw *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) WithTimeout(timeout time.Duration) *PostV1ChannelsChannelIDMessagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) WithContext(ctx context.Context) *PostV1ChannelsChannelIDMessagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) WithHTTPClient(client *http.Client) *PostV1ChannelsChannelIDMessagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChannelID adds the channelID to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) WithChannelID(channelID string) *PostV1ChannelsChannelIDMessagesParams {
	o.SetChannelID(channelID)
	return o
}

// SetChannelID adds the channelId to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) SetChannelID(channelID string) {
	o.ChannelID = channelID
}

// WithExpandEmbedContents adds the expandEmbedContents to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) WithExpandEmbedContents(expandEmbedContents *bool) *PostV1ChannelsChannelIDMessagesParams {
	o.SetExpandEmbedContents(expandEmbedContents)
	return o
}

// SetExpandEmbedContents adds the expandEmbedContents to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) SetExpandEmbedContents(expandEmbedContents *bool) {
	o.ExpandEmbedContents = expandEmbedContents
}

// WithIdempotentKey adds the idempotentKey to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) WithIdempotentKey(idempotentKey *string) *PostV1ChannelsChannelIDMessagesParams {
	o.SetIdempotentKey(idempotentKey)
	return o
}

// SetIdempotentKey adds the idempotentKey to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) SetIdempotentKey(idempotentKey *string) {
	o.IdempotentKey = idempotentKey
}

// WithMessage adds the message to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) WithMessage(message string) *PostV1ChannelsChannelIDMessagesParams {
	o.SetMessage(message)
	return o
}

// SetMessage adds the message to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) SetMessage(message string) {
	o.Message = message
}

// WithNsfw adds the nsfw to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) WithNsfw(nsfw *bool) *PostV1ChannelsChannelIDMessagesParams {
	o.SetNsfw(nsfw)
	return o
}

// SetNsfw adds the nsfw to the post v1 channels channel Id messages params
func (o *PostV1ChannelsChannelIDMessagesParams) SetNsfw(nsfw *bool) {
	o.Nsfw = nsfw
}

// WriteToRequest writes these params to a swagger request
func (o *PostV1ChannelsChannelIDMessagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param channel_id
	if err := r.SetPathParam("channel_id", o.ChannelID); err != nil {
		return err
	}

	if o.ExpandEmbedContents != nil {

		// form param expand_embed_contents
		var frExpandEmbedContents bool
		if o.ExpandEmbedContents != nil {
			frExpandEmbedContents = *o.ExpandEmbedContents
		}
		fExpandEmbedContents := swag.FormatBool(frExpandEmbedContents)
		if fExpandEmbedContents != "" {
			if err := r.SetFormParam("expand_embed_contents", fExpandEmbedContents); err != nil {
				return err
			}
		}

	}

	if o.IdempotentKey != nil {

		// form param idempotent_key
		var frIdempotentKey string
		if o.IdempotentKey != nil {
			frIdempotentKey = *o.IdempotentKey
		}
		fIdempotentKey := frIdempotentKey
		if fIdempotentKey != "" {
			if err := r.SetFormParam("idempotent_key", fIdempotentKey); err != nil {
				return err
			}
		}

	}

	// form param message
	frMessage := o.Message
	fMessage := frMessage
	if fMessage != "" {
		if err := r.SetFormParam("message", fMessage); err != nil {
			return err
		}
	}

	if o.Nsfw != nil {

		// form param nsfw
		var frNsfw bool
		if o.Nsfw != nil {
			frNsfw = *o.Nsfw
		}
		fNsfw := swag.FormatBool(frNsfw)
		if fNsfw != "" {
			if err := r.SetFormParam("nsfw", fNsfw); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
