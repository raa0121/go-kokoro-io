// Code generated by go-swagger; DO NOT EDIT.

package memberships

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new memberships API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for memberships API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteV1MembershipsID Delete a membership.
*/
func (a *Client) DeleteV1MembershipsID(params *DeleteV1MembershipsIDParams) (*DeleteV1MembershipsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1MembershipsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteV1MembershipsId",
		Method:             "DELETE",
		PathPattern:        "/v1/memberships/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1MembershipsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteV1MembershipsIDOK), nil

}

/*
GetV1Memberships Returns user's memberships.
*/
func (a *Client) GetV1Memberships(params *GetV1MembershipsParams) (*GetV1MembershipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1MembershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getV1Memberships",
		Method:             "GET",
		PathPattern:        "/v1/memberships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1MembershipsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetV1MembershipsOK), nil

}

/*
PostV1Memberships Creates a new membership.
*/
func (a *Client) PostV1Memberships(params *PostV1MembershipsParams) (*PostV1MembershipsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1MembershipsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postV1Memberships",
		Method:             "POST",
		PathPattern:        "/v1/memberships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1MembershipsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostV1MembershipsCreated), nil

}

/*
PutV1MembershipsID Updates a membership.
*/
func (a *Client) PutV1MembershipsID(params *PutV1MembershipsIDParams) (*PutV1MembershipsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1MembershipsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putV1MembershipsId",
		Method:             "PUT",
		PathPattern:        "/v1/memberships/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV1MembershipsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1MembershipsIDOK), nil

}

/*
PutV1MembershipsIDJoin Join to invited room
*/
func (a *Client) PutV1MembershipsIDJoin(params *PutV1MembershipsIDJoinParams) (*PutV1MembershipsIDJoinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1MembershipsIDJoinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putV1MembershipsIdJoin",
		Method:             "PUT",
		PathPattern:        "/v1/memberships/{id}/join",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV1MembershipsIDJoinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutV1MembershipsIDJoinOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
