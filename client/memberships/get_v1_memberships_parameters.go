// Code generated by go-swagger; DO NOT EDIT.

package memberships

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetV1MembershipsParams creates a new GetV1MembershipsParams object
// with the default values initialized.
func NewGetV1MembershipsParams() *GetV1MembershipsParams {
	var ()
	return &GetV1MembershipsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1MembershipsParamsWithTimeout creates a new GetV1MembershipsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetV1MembershipsParamsWithTimeout(timeout time.Duration) *GetV1MembershipsParams {
	var ()
	return &GetV1MembershipsParams{

		timeout: timeout,
	}
}

// NewGetV1MembershipsParamsWithContext creates a new GetV1MembershipsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetV1MembershipsParamsWithContext(ctx context.Context) *GetV1MembershipsParams {
	var ()
	return &GetV1MembershipsParams{

		Context: ctx,
	}
}

// NewGetV1MembershipsParamsWithHTTPClient creates a new GetV1MembershipsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetV1MembershipsParamsWithHTTPClient(client *http.Client) *GetV1MembershipsParams {
	var ()
	return &GetV1MembershipsParams{
		HTTPClient: client,
	}
}

/*GetV1MembershipsParams contains all the parameters to send to the API endpoint
for the get v1 memberships operation typically these are written to a http.Request
*/
type GetV1MembershipsParams struct {

	/*Archived*/
	Archived *bool
	/*Authority*/
	Authority *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get v1 memberships params
func (o *GetV1MembershipsParams) WithTimeout(timeout time.Duration) *GetV1MembershipsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 memberships params
func (o *GetV1MembershipsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 memberships params
func (o *GetV1MembershipsParams) WithContext(ctx context.Context) *GetV1MembershipsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 memberships params
func (o *GetV1MembershipsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 memberships params
func (o *GetV1MembershipsParams) WithHTTPClient(client *http.Client) *GetV1MembershipsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 memberships params
func (o *GetV1MembershipsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArchived adds the archived to the get v1 memberships params
func (o *GetV1MembershipsParams) WithArchived(archived *bool) *GetV1MembershipsParams {
	o.SetArchived(archived)
	return o
}

// SetArchived adds the archived to the get v1 memberships params
func (o *GetV1MembershipsParams) SetArchived(archived *bool) {
	o.Archived = archived
}

// WithAuthority adds the authority to the get v1 memberships params
func (o *GetV1MembershipsParams) WithAuthority(authority *string) *GetV1MembershipsParams {
	o.SetAuthority(authority)
	return o
}

// SetAuthority adds the authority to the get v1 memberships params
func (o *GetV1MembershipsParams) SetAuthority(authority *string) {
	o.Authority = authority
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1MembershipsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Archived != nil {

		// query param archived
		var qrArchived bool
		if o.Archived != nil {
			qrArchived = *o.Archived
		}
		qArchived := swag.FormatBool(qrArchived)
		if qArchived != "" {
			if err := r.SetQueryParam("archived", qArchived); err != nil {
				return err
			}
		}

	}

	if o.Authority != nil {

		// query param authority
		var qrAuthority string
		if o.Authority != nil {
			qrAuthority = *o.Authority
		}
		qAuthority := qrAuthority
		if qAuthority != "" {
			if err := r.SetQueryParam("authority", qAuthority); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
