// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmbedDataEntity embed data entity
// swagger:model EmbedDataEntity
type EmbedDataEntity struct {

	// Cache age (in seconds)
	CacheAge int32 `json:"cache_age,omitempty"`

	// medias
	Medias []*EmbedDataMediaEntity `json:"medias"`

	// A media which describes the resource
	MetadataImage *EmbedDataMediaEntity `json:"metadata_image,omitempty"`

	// Restriction policy
	// Enum: [Unknown Safe NotSafe]
	RestrictionPolicy string `json:"restriction_policy,omitempty"`

	// Title of resource
	Title string `json:"title,omitempty"`

	// Resource type
	// Enum: [MixedContent SingleImage SingleVideo SingleAudio]
	Type string `json:"type,omitempty"`

	// URL of resource
	URL string `json:"url,omitempty"`
}

// Validate validates this embed data entity
func (m *EmbedDataEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMedias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadataImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestrictionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmbedDataEntity) validateMedias(formats strfmt.Registry) error {

	if swag.IsZero(m.Medias) { // not required
		return nil
	}

	for i := 0; i < len(m.Medias); i++ {
		if swag.IsZero(m.Medias[i]) { // not required
			continue
		}

		if m.Medias[i] != nil {
			if err := m.Medias[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("medias" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EmbedDataEntity) validateMetadataImage(formats strfmt.Registry) error {

	if swag.IsZero(m.MetadataImage) { // not required
		return nil
	}

	if m.MetadataImage != nil {
		if err := m.MetadataImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata_image")
			}
			return err
		}
	}

	return nil
}

var embedDataEntityTypeRestrictionPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Safe","NotSafe"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		embedDataEntityTypeRestrictionPolicyPropEnum = append(embedDataEntityTypeRestrictionPolicyPropEnum, v)
	}
}

const (

	// EmbedDataEntityRestrictionPolicyUnknown captures enum value "Unknown"
	EmbedDataEntityRestrictionPolicyUnknown string = "Unknown"

	// EmbedDataEntityRestrictionPolicySafe captures enum value "Safe"
	EmbedDataEntityRestrictionPolicySafe string = "Safe"

	// EmbedDataEntityRestrictionPolicyNotSafe captures enum value "NotSafe"
	EmbedDataEntityRestrictionPolicyNotSafe string = "NotSafe"
)

// prop value enum
func (m *EmbedDataEntity) validateRestrictionPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, embedDataEntityTypeRestrictionPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EmbedDataEntity) validateRestrictionPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.RestrictionPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateRestrictionPolicyEnum("restriction_policy", "body", m.RestrictionPolicy); err != nil {
		return err
	}

	return nil
}

var embedDataEntityTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MixedContent","SingleImage","SingleVideo","SingleAudio"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		embedDataEntityTypeTypePropEnum = append(embedDataEntityTypeTypePropEnum, v)
	}
}

const (

	// EmbedDataEntityTypeMixedContent captures enum value "MixedContent"
	EmbedDataEntityTypeMixedContent string = "MixedContent"

	// EmbedDataEntityTypeSingleImage captures enum value "SingleImage"
	EmbedDataEntityTypeSingleImage string = "SingleImage"

	// EmbedDataEntityTypeSingleVideo captures enum value "SingleVideo"
	EmbedDataEntityTypeSingleVideo string = "SingleVideo"

	// EmbedDataEntityTypeSingleAudio captures enum value "SingleAudio"
	EmbedDataEntityTypeSingleAudio string = "SingleAudio"
)

// prop value enum
func (m *EmbedDataEntity) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, embedDataEntityTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EmbedDataEntity) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmbedDataEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmbedDataEntity) UnmarshalBinary(b []byte) error {
	var res EmbedDataEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
