// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceEntity Delete a device
// swagger:model DeviceEntity
type DeviceEntity struct {

	// デバイス用アクセストークン
	AccessToken *AccessTokenEntity `json:"access_token,omitempty"`

	// デバイスを特定するための任意の一意の文字列
	DeviceIdentifier string `json:"device_identifier,omitempty"`

	// デバイス種別
	// Enum: [unknown ios android uwp chrome firefox official_web]
	Kind string `json:"kind,omitempty"`

	// 最後にデバイスを使用した日時
	// Format: date-time
	LastActivityAt strfmt.DateTime `json:"last_activity_at,omitempty"`

	// デバイス名
	Name string `json:"name,omitempty"`

	// プッシュ通知を送るためのidentifier
	NotificationIdentifier string `json:"notification_identifier,omitempty"`

	// プッシュ通知サービスに登録されているかどうか
	PushRegistered bool `json:"push_registered,omitempty"`

	// プッシュ通知を受け取りたいか
	SubscribeNotification bool `json:"subscribe_notification,omitempty"`
}

// Validate validates this device entity
func (m *DeviceEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastActivityAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceEntity) validateAccessToken(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessToken) { // not required
		return nil
	}

	if m.AccessToken != nil {
		if err := m.AccessToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_token")
			}
			return err
		}
	}

	return nil
}

var deviceEntityTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","ios","android","uwp","chrome","firefox","official_web"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceEntityTypeKindPropEnum = append(deviceEntityTypeKindPropEnum, v)
	}
}

const (

	// DeviceEntityKindUnknown captures enum value "unknown"
	DeviceEntityKindUnknown string = "unknown"

	// DeviceEntityKindIos captures enum value "ios"
	DeviceEntityKindIos string = "ios"

	// DeviceEntityKindAndroid captures enum value "android"
	DeviceEntityKindAndroid string = "android"

	// DeviceEntityKindUwp captures enum value "uwp"
	DeviceEntityKindUwp string = "uwp"

	// DeviceEntityKindChrome captures enum value "chrome"
	DeviceEntityKindChrome string = "chrome"

	// DeviceEntityKindFirefox captures enum value "firefox"
	DeviceEntityKindFirefox string = "firefox"

	// DeviceEntityKindOfficialWeb captures enum value "official_web"
	DeviceEntityKindOfficialWeb string = "official_web"
)

// prop value enum
func (m *DeviceEntity) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceEntityTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceEntity) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *DeviceEntity) validateLastActivityAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastActivityAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_activity_at", "body", "date-time", m.LastActivityAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceEntity) UnmarshalBinary(b []byte) error {
	var res DeviceEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
